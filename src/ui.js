// src/ui.js
export const ui = {
    // Refer√™ncias aos elementos da interface
    scoreElement: document.getElementById('score'),
    attemptsElement: document.getElementById('attempts'),
    levelElement: document.getElementById('level'),
    livesElement: document.getElementById('lives'),
    messageBubble: document.getElementById('messageBubble'),
    fakeGameOver: document.getElementById('fakeGameOver'),
    realGameOver: document.getElementById('realGameOver'),
    achievementPopup: document.getElementById('achievementPopup'),
    fakeLag: null,
    countdownPopup: null,
    settingsPanel: null,
    fakeMultiplayer: null,
    fakeRanking: null,
    fakeCursor: null,

    // C√¢mera de mensagens troll
    trollMessages: [
        "Voc√™ bateu? S√©rio? Deixa de ser ruim, cara!",
        "Minha av√≥ joga melhor que voc√™... e ela n√£o tem bra√ßos.",
        "At√© uma lesma se move mais r√°pido. E ela n√£o tem pernas.",
        "O problema √© o jogo ou a sua falta de talento?",
        "Parab√©ns! Voc√™ descobriu como perder! üéâ",
        "Isso n√£o foi nem perto...",
        "Voc√™ est√° tentando perder de prop√≥sito?",
        "Impressionante... impressionantemente ruim.",
        "Talvez seja hora de uma pausa... permanente?",
        "Seus reflexos s√£o mais lentos que internet discada.",
        "Isso foi doloroso de assistir.",
        "Voc√™ consegue ser pior que isso?",
        "Spoiler: sim, voc√™ consegue ser pior.",
        "Que performance... lament√°vel! üíÄ",
        "Voc√™ jogou isso com os p√©s?",
        "At√© meu cachorro joga melhor!",
        "Isso foi um desastre √©pico! üî•",
        "Voc√™ est√° fazendo isso de prop√≥sito?",
        "O que voc√™ est√° fazendo? O jogo n√£o precisa de permiss√£o.",
        "O jogo sentiu sua falta... mas √© para voc√™ continuar jogando, n√£o √© para voc√™ morrer!",
        "N√£o adianta tentar trapacear! Eu sou o rei do jogo, voc√™ √© apenas um plebeu.",
        "Efeitos especiais? Que nada, √© s√≥ a sua tela que t√° ficando velha.",
        "Eu n√£o entendo... voc√™ quer mesmo ser um fracasso?"
    ],

    // Mensagens de ajuda falsas
    helpMessages: [
        "DICA: N√£o clique nos obst√°culos! ü§Ø",
        "DICA AVAN√áADA: Mova-se para n√£o morrer!",
        "DICA PRO: Git gud.",
        "DICA SECRETA: Talvez o problema seja voc√™...",
        "DICA FINAL: Desista enquanto ainda tem dignidade.",
        "DICA IN√öTIL: Pressione Alt+F4 para super velocidade!",
        "DICA FALSA: Feche os olhos para jogar melhor!",
        "DICA TROLL: O jogo fica mais f√°cil se voc√™ gritar!"
    ],

    // Ranking fake para a trollagem
    fakeRankingData: [
        "1. ProGamer2024 - 999,999 pts",
        "2. MLGMaster - 888,888 pts",
        "3. GameLord - 777,777 pts",
        "4. SkillGod - 666,666 pts",
        "5. ElitePlayer - 555,555 pts",
        "...",
        "999,999. Voc√™ - "
    ],

    // Fun√ß√µes de inicializa√ß√£o da UI
    init() {
        this.createDynamicElements();
        console.log("UI configurada!");
    },

    createDynamicElements() {
        // Criar elementos adicionais dinamicamente
        this.fakeLag = this.createElement('div', 'fake-lag', 'fakeLag', '<div>CONEX√ÉO PERDIDA...<br>RECONECTANDO...</div>');
        this.countdownPopup = this.createElement('div', 'countdown-popup', 'countdownPopup', '3');
        this.settingsPanel = this.createElement('div', 'settings-panel', 'settingsPanel', `
            <h3>‚öôÔ∏è CONFIGURA√á√ïES</h3>
            <div class="setting-item">
                <span>Volume:</span>
                <input type="range" min="0" max="100" value="50" id="volumeSlider">
            </div>
            <div class="setting-item">
                <span>Dificuldade:</span>
                <select id="difficultySelect">
                    <option value="easy">F√°cil</option>
                    <option value="normal" selected>Normal</option>
                    <option value="hard">Dif√≠cil</option>
                </select>
            </div>
            <div class="setting-item">
                <span>Modo Escuro:</span>
                <input type="checkbox" id="darkModeCheck">
            </div>
            <div class="setting-item">
                <span>Modo Daltonismo:</span>
                <input type="checkbox" id="colorBlindCheck">
            </div>
        `);
        this.fakeMultiplayer = this.createElement('div', 'fake-multiplayer', 'fakeMultiplayer');
        this.fakeRanking = this.createElement('div', 'fake-ranking', 'fakeRanking');
        this.fakeCursor = this.createElement('div', 'fake-cursor', 'fakeCursor');
    },

    createElement(tag, className, id, innerHTML = '') {
        let element = document.getElementById(id);
        if (!element) {
            element = document.createElement(tag);
            element.className = className;
            element.id = id;
            if (innerHTML) {
                element.innerHTML = innerHTML;
            }
            element.style.display = 'none';
            document.body.appendChild(element);
        }
        return element;
    },

    // Fun√ß√µes de exibi√ß√£o de mensagens e pop-ups
    showTrollMessage(message, duration = 4000) {
        if (this.messageBubble) {
            this.messageBubble.textContent = message;
            this.messageBubble.style.display = 'block';
            setTimeout(() => {
                this.messageBubble.style.display = 'none';
            }, duration);
        }
        console.log("Troll Message:", message);
    },

    showFakeHelp() {
        const helpMessage = this.helpMessages[Math.floor(Math.random() * this.helpMessages.length)];
        this.showTrollMessage(helpMessage);
    },

    showFakeGameOver(score) {
        const randomTrollMessage = this.trollMessages[Math.floor(Math.random() * this.trollMessages.length)];
        if (this.fakeGameOver) {
            const p = this.fakeGameOver.querySelector('p');
            if (p) p.textContent = randomTrollMessage;
            this.fakeGameOver.style.display = 'block';
        }
        document.body.classList.add('screen-shake');
        setTimeout(() => document.body.classList.remove('screen-shake'), 500);
    },

    showRealGameOver() {
        if (this.fakeGameOver) this.fakeGameOver.style.display = 'none';
        if (this.realGameOver) this.realGameOver.style.display = 'block';
        document.body.classList.add('glitch-effect');
        setTimeout(() => document.body.classList.remove('glitch-effect'), 300);
    },

    showAchievement(title, description, achievementsList) {
        if (achievementsList.includes(title)) return;
        achievementsList.push(title);
        if (this.achievementPopup) {
            const h3 = this.achievementPopup.querySelector('h3');
            const p = document.getElementById('achievementText');
            if (h3) h3.textContent = title;
            if (p) p.textContent = description;
            this.achievementPopup.style.display = 'block';
            setTimeout(() => {
                this.achievementPopup.style.display = 'none';
            }, 5000);
        }
    },

    showFakeLag() {
        if (this.fakeLag) {
            this.fakeLag.style.display = 'flex';
        }
    },

    hideFakeLag() {
        if (this.fakeLag) {
            this.fakeLag.style.display = 'none';
        }
    },

    showFakeCountdown() {
        if (!this.countdownPopup) return;
        this.countdownPopup.style.display = 'block';
        let count = 3;
        const countInterval = setInterval(() => {
            this.countdownPopup.textContent = count;
            count--;
            if (count < 0) {
                clearInterval(countInterval);
                this.countdownPopup.textContent = 'S√ì BRINCANDO! üòÇ';
                setTimeout(() => {
                    this.countdownPopup.style.display = 'none';
                    this.showTrollMessage("Achou que ia ter uma √∫ltima chance? Que inocente! üòà");
                }, 2000);
            }
        }, 1000);
    },

    updateUI(score, attempts, level) {
        if (this.scoreElement) this.scoreElement.textContent = score;
        if (this.attemptsElement) this.attemptsElement.textContent = attempts;
        if (this.levelElement) this.levelElement.textContent = level;
    },

    updateLives(lives) {
        if (this.livesElement) {
            this.livesElement.textContent = '‚ô•‚ô•‚ô•'.slice(0, lives);
        }
    },
};